"""Tests for coefficients module"""

"""___Built-In Modules___"""
from datetime import datetime, timezone
import filecmp
from typing import Tuple, List


"""___Third-Party Modules___"""
import unittest
import numpy as np

"""___LIME_TBX Modules___"""
from .. import coefficients

"""___Authorship___"""
__author__ = "Javier Gatón Herguedas"
__created__ = "09/02/2023"
__maintainer__ = "Javier Gatón Herguedas"
__email__ = "gaton@goa.uva.es"
__status__ = "Development"


COEFF_PATH = "./coeff_data/versions/LIME_MODEL_COEFS_20231120_V02.nc"


def _get_20231120_coeff_data() -> (
    Tuple[List[float], List[float], List[float], List[float]]
):
    data = np.array(
        [
            [
                -2.25120059e00,
                -2.12389812e00,
                -1.88279658e00,
                -1.74905715e00,
                -1.68440507e00,
                -1.37616517e00,
            ],
            [
                -2.18724449e00,
                -2.08042136e00,
                -1.99793809e00,
                -1.86915829e00,
                -1.83660289e00,
                -1.55937166e00,
            ],
            [
                1.07958272e00,
                9.58826103e-01,
                9.83552961e-01,
                8.56574596e-01,
                8.71021751e-01,
                7.04429674e-01,
            ],
            [
                -4.77518363e-01,
                -4.25199154e-01,
                -4.55904164e-01,
                -4.00904556e-01,
                -4.18355641e-01,
                -3.87873238e-01,
            ],
            [
                4.82732325e-02,
                4.40617784e-02,
                4.58797000e-02,
                4.73846047e-02,
                5.38576114e-02,
                4.83493213e-02,
            ],
            [
                2.25782727e-02,
                1.84954497e-02,
                1.70059622e-02,
                1.58604469e-02,
                1.75653222e-02,
                1.00468677e-02,
            ],
            [
                -1.01620094e-02,
                -6.91515045e-03,
                -7.40780609e-03,
                -4.21260958e-03,
                -6.60494818e-03,
                -4.11777603e-03,
            ],
            [
                -4.01494766e-04,
                -1.03429053e-03,
                -1.23256777e-03,
                -9.82026557e-04,
                -1.28265447e-03,
                -9.07939706e-04,
            ],
            [
                9.93774275e-04,
                4.30200427e-04,
                7.40067288e-04,
                4.89828115e-04,
                3.86177380e-04,
                3.15136539e-04,
            ],
            [
                9.52160725e-04,
                4.63428366e-04,
                9.82356560e-04,
                6.90399788e-04,
                5.97112528e-04,
                1.18135775e-03,
            ],
            [
                1.57846164e-03,
                1.20361757e-03,
                1.56231308e-03,
                1.67657032e-03,
                1.50271295e-03,
                1.34691074e-03,
            ],
            [
                1.49109036e00,
                1.63792758e00,
                6.99086486e-01,
                5.03895876e-01,
                4.91351624e-01,
                3.73388307e-01,
            ],
            [
                -6.23681318e-03,
                -1.00384864e-02,
                -2.50154886e-03,
                -1.91932914e-03,
                -3.13742775e-03,
                -2.27256291e-03,
            ],
            [
                -1.16428140e-02,
                -1.04869516e-02,
                -1.30019004e-02,
                -1.30087680e-02,
                -1.42982069e-02,
                -9.84722684e-03,
            ],
            [
                1.39382060e00,
                1.39382060e00,
                1.39382060e00,
                1.39382060e00,
                1.39382060e00,
                1.39382060e00,
            ],
            [
                1.51038540e01,
                1.51038540e01,
                1.51038540e01,
                1.51038540e01,
                1.51038540e01,
                1.51038540e01,
            ],
            [
                1.20732199e01,
                1.20732199e01,
                1.20732199e01,
                1.20732199e01,
                1.20732199e01,
                1.20732199e01,
            ],
            [
                8.06106834e00,
                8.06106834e00,
                8.06106834e00,
                8.06106834e00,
                8.06106834e00,
                8.06106834e00,
            ],
        ]
    )
    u_data = np.array(
        [
            [
                -0.44124875,
                -0.43683891,
                -0.50235933,
                -0.53530698,
                -0.62494618,
                -0.76002475,
            ],
            [
                -0.11972291,
                -0.09569052,
                -0.07030507,
                -0.08145659,
                -0.08212618,
                -0.09023767,
            ],
            [0.4351898, 0.33464586, 0.23811876, 0.29448711, 0.30144986, 0.35660483],
            [
                -0.4835721,
                -0.34160689,
                -0.23691218,
                -0.29136224,
                -0.30252918,
                -0.31696472,
            ],
            [1.04462348, 0.82475129, 0.59160082, 0.62640316, 0.5380412, 0.51958742],
            [4.74509432, 3.70834804, 2.92875368, 3.78233216, 3.33535773, 5.77645695],
            [
                -4.99779204,
                -4.11511975,
                -2.77074503,
                -6.38714387,
                -3.97937186,
                -6.49162932,
            ],
            [
                -5.80529424,
                -1.55114081,
                -1.05903848,
                -1.37124745,
                -1.04953451,
                -1.2330882,
            ],
            [2.65445207, 4.44712449, 1.8175337, 2.86920171, 3.44695546, 4.24201672],
            [4.03882546, 5.10421487, 1.86841827, 2.84306693, 3.4121139, 1.73314679],
            [2.66286833, 2.04899232, 1.08414686, 1.21769521, 1.24893437, 1.51257876],
            [0.31510124, 1.41109183, 0.47149557, 0.63430137, 0.6350848, 0.89617238],
            [
                -3.48839685,
                -1.81058502,
                -4.68231434,
                -6.53593844,
                -3.79386905,
                -4.89017359,
            ],
            [
                -1.31141974,
                -0.90062379,
                -0.59764836,
                -0.62333243,
                -0.56718593,
                -0.78764612,
            ],
            [0.17668495, 0.17668495, 0.17668495, 0.17668495, 0.17668495, 0.17668495],
            [0.17815354, 0.17815354, 0.17815354, 0.17815354, 0.17815354, 0.17815354],
            [0.18187974, 0.18187974, 0.18187974, 0.18187974, 0.18187974, 0.18187974],
            [0.05519032, 0.05519032, 0.05519032, 0.05519032, 0.05519032, 0.05519032],
        ]
    )
    pos_coeff = np.array(
        [
            [
                -8.64072258e-05,
                2.90942646e-03,
                3.63515121e-03,
                3.07562466e-03,
                2.10103813e-03,
                3.36742202e-03,
            ],
            [
                -1.11900096e-03,
                -2.06629645e-03,
                -1.97646179e-03,
                -1.72534256e-03,
                -1.34150486e-03,
                -1.21256379e-03,
            ],
            [
                2.84741265e-05,
                7.14087964e-05,
                6.67298722e-05,
                5.59545672e-05,
                4.07243363e-05,
                3.68099380e-05,
            ],
            [
                3.75188908e-07,
                -4.79959820e-07,
                -5.33485993e-07,
                -3.55121187e-07,
                -1.46682640e-07,
                -2.45340515e-07,
            ],
            [
                -4.71523004e-09,
                6.71795560e-10,
                1.32021881e-09,
                6.20573476e-11,
                -9.66379448e-10,
                3.38564406e-10,
            ],
        ]
    )
    neg_coeff = np.array(
        [
            [
                1.16880128e-03,
                1.22120817e-03,
                7.26884344e-04,
                4.90534452e-04,
                1.05925760e-03,
                1.39074202e-04,
            ],
            [
                1.75041288e-03,
                1.59721462e-03,
                1.24056050e-03,
                1.47854795e-03,
                1.56370149e-03,
                9.65645866e-04,
            ],
            [
                7.64072161e-05,
                6.58141993e-05,
                4.69061004e-05,
                5.85888617e-05,
                6.05580515e-05,
                3.59822403e-05,
            ],
            [
                7.16185043e-07,
                5.79285232e-07,
                3.60857697e-07,
                5.66177307e-07,
                5.77091883e-07,
                3.05074641e-07,
            ],
            [
                1.80118877e-09,
                1.26755726e-09,
                4.27228140e-10,
                1.70395436e-09,
                1.67239533e-09,
                7.71405769e-10,
            ],
        ]
    )
    return data, u_data, pos_coeff, neg_coeff


class TestCoefficients(unittest.TestCase):
    def test_read_coefficients(self):
        cf = coefficients.read_coeff_nc(COEFF_PATH)
        version = "20231120_v2"
        data, u_data, pos, neg = _get_20231120_coeff_data()
        self.assertEqual(cf.version, version)
        rf = cf.reflectance
        for i, arr in enumerate(rf._ds.coeff.values):
            for j, val in enumerate(arr):
                self.assertAlmostEqual(val, data[i][j])
        for i, arr in enumerate(rf._ds.u_coeff.values):
            for j, val in enumerate(arr):
                self.assertAlmostEqual(val, u_data[i][j])
        pl = cf.polarisation
        for i, arr in enumerate(pl.pos_coeffs):
            np.testing.assert_array_almost_equal(arr, pos.T[i])
        for i, arr in enumerate(pl.neg_coeffs):
            np.testing.assert_array_almost_equal(arr, neg.T[i])


if __name__ == "__main__":
    unittest.main()
