name: CI Pipeline

on:
  push:
    branches:
      - '*'
  pull_request:
  workflow_dispatch:

jobs:
  setup-cache:
    name: Setup Cache
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup Cache
        uses: actions/cache@v3
        with:
          path: |
            .cache/pip
            .tox/
            venv/
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

  lint-black:
    name: Black Code Style Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Run Black
        uses: docker://cytopia/black
        with:
          args: black --check lime_tbx
        continue-on-error: true

  lint-mypy:
    name: MyPy Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Run MyPy
        uses: docker://grktsh/mypy
        with:
          args: mypy lime_tbx
        continue-on-error: true

  test-tox:
    name: Run Tox Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox
      - name: Run Tox
        run: |
          mkdir -p test_report
          export PYTHONPATH="$PYTHONPATH:."
          tox
      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test_report/

  test-slow:
    name: Run Slow Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox
      - name: Run Slow Tests
        run: |
          mkdir -p test_report
          export PYTHONPATH="$PYTHONPATH:."
          tox -- --runslow
      - name: Upload Slow Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: slow-test-report
          path: test_report/

  docs-build:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx
          pip install myst_parser
      - name: Build HTML Docs
        run: sphinx-build docs public -b html
      - name: Upload Documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: public/

  deploy-docs:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: docs-build
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: public

  pdf-build:
    name: Build PDF Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx
          pip install myst_parser
      - name: Build PDF Docs
        run: |
          sphinx-build docs latex -b latex
          mkdir -p quality_documentation/latex
          cp -r latex/* quality_documentation/latex/
      - name: Compile LaTeX
        uses: docker://charlesbaynham/ctanfull
        with:
          args: make -C quality_documentation/latex
      - name: Upload PDF
        uses: actions/upload-artifact@v4
        with:
          name: user-manual
          path: quality_documentation/latex/user_manual.pdf

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Run Code Quality Analysis
        uses: docker://registry.gitlab.com/gitlab-org/ci-cd/codequality:0.85.9
        with:
          args: /code
      - name: Upload Code Quality Report
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-report
          path: gl-code-quality-report.json
